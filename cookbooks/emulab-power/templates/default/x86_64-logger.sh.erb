#!/bin/bash
# Start inifinite power recording
# 
# ----------------------------------------------
# This file is a Chef template.
# It is automatically completed and distributed. 
# ----------------------------------------------
#

record_single_sample() {
# This function records a single power measurements (with hostname and timestamp).
# If $3 does not have a comma, it is interpreted as a single ipmi-sensor ID; measurement for this sensor gets recorded.
# It it includes a comma, it is interpreted as a pair of sensor IDs for Current and Voltage;
# measurements for Current and Voltage and multiplied and recorded.
#
  host=$1
  file=$2
  sensor_id=$3

  if [[ $sensor_id == *","* ]] ; then
    # Get Current and Voltage measuremetns and multiply them
    power=`ipmi-sensors -r $sensor_id --comma-separated-output --no-header-output | awk -F',' '{print $4}' | paste -sd"*" - | bc`
  else
    # Get a measurement by sensor id
    power=`ipmi-sensors -r $sensor_id --comma-separated-output --no-header-output | awk -F',' '{print $4}'`
  fi  

  timestamp=`date +"%Y-%m-%d %H:%M:%S.%3N"`
  echo "$host,$timestamp,$power" >> $file
}

host=$(hostname -f)
file="<%= @dest_dir %>/$host.csv"
  
# Create new directory if necessary
dir=`dirname $file`
if [ ! -d "$dir" ]; then
  mkdir -p $dir
fi

chassis_model=`dmidecode -t 1 | grep "Product Name" | sed "s/.*:\ //" | sed "s/\ *$//"`
#
# ToDo: add other chasses
#
if [ "$chassis_model" == "UCSC-C220-M4S" ]; then
  # Tuned for the c220g2 chassis
  sensor_name="PSU1_POUT"
  sensor_id=`ipmi-sensors | grep "$sensor_name" | sed "s/\ .*//g"`
elif [ "$chassis_model" == "PowerEdge C6320" ]; then
  # Tuned for the c6320 chassis
  #
  # One way:
  #sensor_name="Pwr Consumption"
  #sensor_id=`ipmi-sensors | grep "$sensor_name" | sed "s/\ .*//g"`
  #
  # Another way (seems to be more responsive to load; comma-separated list of IDs):
  sensor_id=`ipmi-sensors | grep -E "Input Current|Input Voltage" | sed "s/\ .*//g" | paste -sd"," -`
else
  echo "Unsupported chassis model. Exiting"
  exit 1
fi

samples="<%= @sample_limit %>"

if [ "$samples" == "INF" ] ; then
  # Log infinitely
  while true ; do
    record_single_sample $host $file $sensor_id
    sleep <%= @sample_interval_sec %>
  done
else
  # Log only the specified number of samples and exit
  count=0
  while [[ "$count" -lt "$samples" ]] ; do
    record_single_sample $host $file $sensor_id
    sleep <%= @sample_interval_sec %>
    count=$((count + 1))
  done
fi
